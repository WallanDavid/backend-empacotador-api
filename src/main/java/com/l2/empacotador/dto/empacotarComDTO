package com.l2.empacotador.service;

import com.l2.empacotador.dto.CaixaResponseDTO;
import com.l2.empacotador.dto.PedidoRequestDTO;
import com.l2.empacotador.dto.PedidoResponseDTO;
import com.l2.empacotador.dto.ProdutoRequestDTO;

import java.util.*;

public class EmpacotadorService {

    // Caixas disponíveis
    private static final List<Caixa> caixas = List.of(
            new Caixa("Caixa 1", 30, 40, 80),
            new Caixa("Caixa 2", 80, 50, 40),
            new Caixa("Caixa 3", 50, 80, 60)
    );

    public List<PedidoResponseDTO> empacotarComDTO(List<PedidoRequestDTO> pedidosDTO) {
        List<PedidoResponseDTO> respostas = new ArrayList<>();

        for (PedidoRequestDTO pedidoDTO : pedidosDTO) {
            List<CaixaAberta> caixasAbertas = new ArrayList<>();

            for (ProdutoRequestDTO produto : pedidoDTO.getProdutos()) {
                boolean encaixou = false;

                for (CaixaAberta caixaAberta : caixasAbertas) {
                    if (caixaAberta.cabe(produto)) {
                        caixaAberta.produtos.add(produto);
                        encaixou = true;
                        break;
                    }
                }

                if (!encaixou) {
                    Optional<Caixa> caixaAdequada = caixas.stream()
                            .filter(c -> c.cabe(produto))
                            .findFirst();

                    if (caixaAdequada.isEmpty()) {
                        throw new RuntimeException("Produto não cabe em nenhuma caixa: " + produto.getId());
                    }

                    Caixa novaCaixa = caixaAdequada.get();
                    CaixaAberta caixaAberta = new CaixaAberta(novaCaixa);
                    caixaAberta.produtos.add(produto);
                    caixasAbertas.add(caixaAberta);
                }
            }

            // Converte caixas abertas para resposta DTO
            List<CaixaResponseDTO> caixasResposta = new ArrayList<>();
            for (CaixaAberta aberta : caixasAbertas) {
                List<String> idsProdutos = new ArrayList<>();
                for (ProdutoRequestDTO p : aberta.produtos) {
                    idsProdutos.add(p.getId());
                }
                caixasResposta.add(new CaixaResponseDTO(aberta.caixa.getNome(), idsProdutos));
            }

            respostas.add(new PedidoResponseDTO(pedidoDTO.getId(), caixasResposta));
        }

        return respostas;
    }

    // Classes internas para controle das caixas e lógica de encaixe
    private static class Caixa {
        private final String nome;
        private final double altura, largura, comprimento;
        private final double volume;

        public Caixa(String nome, double altura, double largura, double comprimento) {
            this.nome = nome;
            this.altura = altura;
            this.largura = largura;
            this.comprimento = comprimento;
            this.volume = altura * largura * comprimento;
        }

        public String getNome() { return nome; }

        public boolean cabe(ProdutoRequestDTO produto) {
            // Verifica todas as combinações de orientação pra encaixar o produto
            return (produto.getAltura() <= altura && produto.getLargura() <= largura && produto.getComprimento() <= comprimento)
                    || (produto.getAltura() <= altura && produto.getComprimento() <= largura && produto.getLargura() <= comprimento)
                    || (produto.getLargura() <= altura && produto.getAltura() <= largura && produto.getComprimento() <= comprimento)
                    || (produto.getLargura() <= altura && produto.getComprimento() <= largura && produto.getAltura() <= comprimento)
                    || (produto.getComprimento() <= altura && produto.getAltura() <= largura && produto.getLargura() <= comprimento)
                    || (produto.getComprimento() <= altura && produto.getLargura() <= largura && produto.getAltura() <= comprimento);
        }
    }

    private static class CaixaAberta {
        Caixa caixa;
        List<ProdutoRequestDTO> produtos = new ArrayList<>();

        CaixaAberta(Caixa caixa) {
            this.caixa = caixa;
        }

        public boolean cabe(ProdutoRequestDTO produto) {
            double volumeUsado = produtos.stream()
                    .mapToDouble(p -> p.getAltura() * p.getLargura() * p.getComprimento())
                    .sum();
            double volumeProduto = produto.getAltura() * produto.getLargura() * produto.getComprimento();

            return volumeUsado + volumeProduto <= caixa.volume && caixa.cabe(produto);
        }
    }
}
